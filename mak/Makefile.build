# VMware OSS Build Schema for Apache HTTP Server
# 
# Copyright (c) 2017-2021 VMware, Inc.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile.build : Build all components described by the manifest in the
#                  source tree.
#
# BLD defines the build type: release - candidate - snapshot - bleed
# TAG defines the target directory and package name suffixes
# OPT declares optimization of verified parallel builds (-j4 by default)
#
# This makefile is run after Makefile.gather and Makefile.preconfig
#
# This makefile must be run from the build (not source) subdirectory,
# the build tree uses the same component directory names as the source tree
# The components are initially installed into the DESTDIR which is the
# ../dst/httpd component directory name with the TAG variable suffixed.

BLD=release
TAG=
OPT=-j4
SRCDIR=$(shell cd ..; pwd)/src

include $(SRCDIR)/$(BLD)-manifest-vars

DESTDIR=$(shell cd ..; pwd)/dst/$(httpd_srcdir)$(TAG)
TARGET=/opt/apache/webserver/$(httpd_srcdir)$(TAG)

CMAKE_DEFAULTS=-G "Unix Makefiles" -D CMAKE_COLOR_MAKEFILE=OFF
PREFER_CMAKE=0

all: build-httpd

pre-build:
	-mkdir -p $(DESTDIR) 2>/dev/null
	echo $(SRCDIR)


ifndef expat_srcdir
with_expat=
build-expat:
else ifeq "$(PREFER_CMAKE)" "1"
with_expat=--with-expat=$(DESTDIR)
$(expat_srcdir)/Makefile:  $(SRCDIR)/$(expat_srcdir)/expat/CMakeLists.txt
	-mkdir $(expat_srcdir) 2>/dev/null
	cd $(expat_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) -D BUILD_tests=OFF -D BUILD_tools=OFF \
		-D BUILD_shared=OFF -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(expat_srcdir)/expat && \
	cd ..

build-expat: $(expat_srcdir)/Makefile
	cd $(expat_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
else
# Various solutions are needed on RHEL7, Ubuntu 16 (having docbook2X) vs RHEL6
# DOCBOOK_TO_MAN=`which docbook2x-man db2x_docbook2man 2>/dev/null` 
# DOCBOOK_TO_MAN="xmlto man --skip-validation"
with_expat=--with-expat=$(DESTDIR)
$(expat_srcdir)/Makefile: $(SRCDIR)/$(expat_srcdir)/expat/configure
	-mkdir $(expat_srcdir) 2>/dev/null
	cd $(expat_srcdir) && \
	  DOCBOOK_TO_MAN=`which docbook2x-man db2x_docbook2man xmlto | sed "s#xmlto#xmlto man --skip-validation#;1q"` \
	  $(SRCDIR)/$(expat_srcdir)/expat/configure \
		--prefix=$(DESTDIR) && \
	cd ..

build-expat: $(expat_srcdir)/Makefile
	cd $(expat_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif

# Once apr-util detects include/libxml2 as the include path, move this into
# the ifndef below and uncomment the following assignments
with_libxml2=
with_aprexpat=$(with_expat)

ifndef libxml2_srcdir
build-libxml2:
else
#with_libxml2=--with-libxml2=$(DESTDIR)
#with_aprexpat=
$(libxml2_srcdir)/Makefile: $(SRCDIR)/$(libxml2_srcdir)
	-mkdir $(libxml2_srcdir) 2>/dev/null
	cd $(libxml2_srcdir) && \
	  $(SRCDIR)/$(libxml2_srcdir)/configure prefix=$(DESTDIR) \
		--without-zlib \
		--without-lzma \
		--without-python && \
	cd ..

build-libxml2: $(libxml2_srcdir)/Makefile
	cd $(libxml2_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
endif

ifndef openssl_srcdir
with_ssl=
with_openssl=
build-openssl:
else ifeq "$(patsubst 1.0.%,,$(openssl_ver))" ""
with_ssl=--with-ssl=$(DESTDIR)
with_openssl=--with-openssl=$(DESTDIR)
$(openssl_srcdir)/Makefile: $(firstword $(MAKEFILE_LIST)) \
			    $(SRCDIR)/$(openssl_srcdir)
	-mkdir $(openssl_srcdir) 2>/dev/null
	cp -prf $(SRCDIR)/$(openssl_srcdir)/* $(openssl_srcdir)/
	cd $(openssl_srcdir) && \
	  ./config --prefix=$(DESTDIR) shared \
		   -I$(DESTDIR)/include -L$(DESTDIR)/lib \
		   -Wl,-rpath,$(TARGET)/lib && \
	cd ..

build-openssl: $(openssl_srcdir)/Makefile
	cd $(openssl_srcdir) && \
	  make && \
	  make install && \
	cd ..
else
with_ssl=--with-ssl=$(DESTDIR)
with_openssl=--with-openssl=$(DESTDIR)
$(openssl_srcdir)/Makefile: $(SRCDIR)/$(openssl_srcdir)/Configure
	-mkdir $(openssl_srcdir) 2>/dev/null
	cd $(openssl_srcdir) && \
	  $(SRCDIR)/$(openssl_srcdir)/config shared \
		 --libdir=lib --prefix=$(DESTDIR) \
		 -Wl,-rpath,$(TARGET)/lib && \
	cd ..

build-openssl: $(openssl_srcdir)/Makefile
	cd $(openssl_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef openldap_srcdir
with_openldap=--without-ldap --without-lber
enable_ldap=--disable-ldap --disable-authnz-ldap
build-openldap:
else
with_openldap=--with-ldap-lib=$(DESTDIR)/lib --with-ldap-include=$(DESTDIR)/include --with-ldap=ldap --with-lber=lber
enable_ldap=--enable-ldap --enable-authnz-ldap

$(openldap_srcdir)/Makefile: build-openssl \
			     $(SRCDIR)/$(openldap_srcdir)/configure
	-mkdir $(openldap_srcdir) 2>/dev/null
	cd $(openldap_srcdir) && \
	  CPPFLAGS="-I$(DESTDIR)/include $(CPPFLAGS)" \
	  LDFLAGS="-L$(DESTDIR)/lib $(LDFLAGS)" \
	  $(SRCDIR)/$(openldap_srcdir)/configure \
		 --with-tls=openssl \
		 --without-cyrus-sasl \
		 --disable-ldbm \
		 --disable-sasl \
		 --disable-slapd \
		 --disable-slurpd \
		 --prefix=$(DESTDIR) && \
	cd ..

build-openldap: $(openldap_srcdir)/Makefile
	cd $(openldap_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


# Disabing option checking here, so apr-util-1 options can be passed to apr-1
# These options must be given to the monolithic apr-2 config
ifndef apr_srcdir
with_apr=
build-apr:
else
with_apr=--with-apr=$(DESTDIR)
$(apr_srcdir)/Makefile: build-openssl build-expat build-libxml2 \
			$(SRCDIR)/$(apr_srcdir)/configure
	-mkdir $(apr_srcdir) 2>/dev/null
	cd $(apr_srcdir) && \
	  $(SRCDIR)/$(apr_srcdir)/configure \
		 --disable-option-checking \
		 $(with_openssl) \
		 $(with_libxml2) \
		 $(with_aprexpat) \
		 --without-nss \
		 --with-crypto \
		 --with-installbuilddir=\$${prefix}/build \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..

build-apr: $(apr_srcdir)/Makefile
	cd $(apr_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef apriconv_srcdir_is_fixed
with_apriconv=
build-apriconv: build-apr
else
with_apriconv=--with-apr-iconv=$(DESTDIR)
$(apriconv_srcdir)/Makefile: $(SRCDIR)/$(apriconv_srcdir)/configure
	-mkdir $(apriconv_srcdir) 2>/dev/null
	cd $(apriconv_srcdir) && \
	  $(SRCDIR)/$(apriconv_srcdir)/configure \
		 $(with_apr) \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..

build-apriconv: $(apriconv_srcdir)/Makefile
	cd $(apriconv_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef aprutil_srcdir
with_aprutil=
build-aprutil: build-apr
else
with_aprutil=--with-apr-util=$(DESTDIR)
$(aprutil_srcdir)/Makefile: build-openssl build-expat build-libxml2 \
			    build-apr build-apriconv \
			    $(SRCDIR)/$(aprutil_srcdir)/configure
	-mkdir $(aprutil_srcdir) 2>/dev/null
	cd $(aprutil_srcdir) && \
	  $(SRCDIR)/$(aprutil_srcdir)/configure \
		 $(with_apr) \
		 $(with_apriconv) \
		 $(with_openssl) \
		 $(with_openldap) \
		 $(with_libxml2) \
		 $(with_aprexpat) \
		 --without-nss \
		 --with-crypto \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..

build-aprutil: $(aprutil_srcdir)/Makefile
	cd $(aprutil_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef brotli_srcdir
with_brotli=
build-brotli:
else
with_brotli=--with-brotli=$(DESTDIR)
$(brotli_srcdir)/Makefile: $(SRCDIR)/$(brotli_srcdir)/CMakeLists.txt
	-mkdir $(brotli_srcdir) 2>/dev/null
	cd $(brotli_srcdir) && \
	  cmake -G "Unix Makefiles" \
		-D CMAKE_INSTALL_LIBDIR=lib \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(brotli_srcdir) && \
	cd ..

build-brotli: $(brotli_srcdir)/Makefile
	cd $(brotli_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef jansson_srcdir
with_jansson=
build-jansson:
else ifeq "$(PREFER_CMAKE)" "1"
with_jansson=--with-jansson=$(DESTDIR)
$(jansson_srcdir)/Makefile:  $(SRCDIR)/$(jansson_srcdir)/CMakeLists.txt
	-mkdir $(jansson_srcdir) 2>/dev/null
	cd $(jansson_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D BUILD_SHARED_LIBS=ON -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(jansson_srcdir) && \
	cd ..

build-jansson: $(jansson_srcdir)/Makefile
	cd $(jansson_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
else
with_jansson=--with-jansson=$(DESTDIR)
$(jansson_srcdir)/Makefile: $(SRCDIR)/$(jansson_srcdir)/configure
	-mkdir $(jansson_srcdir) 2>/dev/null
	cd $(jansson_srcdir) && \
	  $(SRCDIR)/$(jansson_srcdir)/configure \
		 --prefix=$(DESTDIR) && \
	cd ..

build-jansson: $(jansson_srcdir)/Makefile
	cd $(jansson_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
endif


# Nothing yet - the default is nonsense. Need to work out a suitable schema
with_lua=
build-lua:


ifndef pcre_srcdir
with_pcre=
build-pcre:
else ifeq "$(PREFER_CMAKE)" "1"
with_pcre=--with-pcre=$(DESTDIR)
$(pcre_srcdir)/Makefile:  $(SRCDIR)/$(pcre_srcdir)/CMakeLists.txt
	-mkdir $(pcre_srcdir) 2>/dev/null
	cd $(pcre_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D BUILD_SHARED_LIBS=ON -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(pcre_srcdir) && \
	cd ..

build-pcre: $(pcre_srcdir)/Makefile
	cd $(pcre_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
else
with_pcre=--with-pcre=$(DESTDIR)
$(pcre_srcdir)/Makefile: $(SRCDIR)/$(pcre_srcdir)/configure
	-mkdir $(pcre_srcdir) 2>/dev/null
	cd $(pcre_srcdir) && \
	  $(SRCDIR)/$(pcre_srcdir)/configure \
		 --prefix=$(DESTDIR) && \
	cd ..

build-pcre: $(pcre_srcdir)/Makefile
	cd $(pcre_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
endif


ifndef zlib_srcdir
with_zlib=
build-zlib:
else ifeq "$(PREFER_CMAKE)" "1"
with_zlib=--with-zlib=$(DESTDIR)
$(zlib_srcdir)/Makefile: $(SRCDIR)/$(zlib_srcdir)/CMakeLists.txt
	-mkdir $(zlib_srcdir) 2>/dev/null
	cd $(zlib_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(zlib_srcdir) && \
	cd ..

build-zlib: $(zlib_srcdir)/Makefile
	cd $(zlib_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
else
with_zlib=--with-zlib=$(DESTDIR)
$(zlib_srcdir)/Makefile: $(SRCDIR)/$(zlib_srcdir)/configure
	-mkdir $(zlib_srcdir) 2>/dev/null
	cd $(zlib_srcdir) && \
	  $(SRCDIR)/$(zlib_srcdir)/configure \
		 --prefix=$(DESTDIR) && \
	cd ..

build-zlib: $(zlib_srcdir)/Makefile
	cd $(zlib_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
endif


ifndef nghttp2_srcdir
with_nghttp2=
build-nghttp2:
else
with_nghttp2=--with-nghttp2=$(DESTDIR)
$(nghttp2_srcdir)/Makefile: $(SRCDIR)/$(nghttp2_srcdir)/configure
	-mkdir $(nghttp2_srcdir) 2>/dev/null
	cd $(nghttp2_srcdir) && \
	  $(SRCDIR)/$(nghttp2_srcdir)/configure \
		 --enable-lib-only \
		 --prefix=$(DESTDIR) && \
	cd ..

build-nghttp2: $(nghttp2_srcdir)/Makefile
	cd $(nghttp2_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


ifndef curl_srcdir
with_curl=
build-curl:
else ifeq "$(PREFER_CMAKE)" "1"
with_curl=--with-curl=$(DESTDIR)
$(curl_srcdir)/Makefile:  $(SRCDIR)/$(curl_srcdir)/CMakeLists.txt
	-mkdir $(curl_srcdir) 2>/dev/null
	cd $(curl_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D BUILD_SHARED_LIBS=ON -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(curl_srcdir) && \
	cd ..

build-curl: $(curl_srcdir)/Makefile
	cd $(curl_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
else

with_curl=--with-curl=$(DESTDIR)
$(curl_srcdir)/Makefile: build-openssl build-zlib build-brotli build-nghttp2 \
			 $(SRCDIR)/$(curl_srcdir)/configure
	-mkdir $(curl_srcdir) 2>/dev/null
	cd $(curl_srcdir) && \
	  LD_LIBRARY_PATH=$(DESTDIR)/lib:$(LD_LIBRARY_PATH) \
	    $(SRCDIR)/$(curl_srcdir)/configure \
		 $(with_ssl) \
		 $(with_zlib) \
		 $(with_brotli) \
		 $(with_nghttp2) \
		 --without-gnutls \
		 --without-polarssl \
		 --without-mbedtls \
		 --without-cyassl \
		 --without-nss \
		 --without-axtls \
		 --without-libpsl \
		 --without-libmetalink \
		 --without-libssh2 \
		 --without-gssapi \
		 --without-libidn2 \
		 --without-librtmp \
		 --without-zsh-functions-dir \
		 --disable-ldap \
		 --disable-ldaps \
		 --disable-rtsp \
		 --prefix=$(DESTDIR) && \
	cd ..

build-curl: $(curl_srcdir)/Makefile
	cd $(curl_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
endif


# Explicitly enabling version and unixd as built-in on Unix, enabling suexec,
# cgi for prefork configs, and authnz-fcgi and proxy-http2 for early adopters.
#
# Explicitly disabling dialup, echo and reflector as experimental/test
#
$(httpd_srcdir)/Makefile: build-openssl build-openldap \
			  build-brotli build-jansson build-libxml2 \
			  build-lua build-pcre build-zlib \
			  build-apr build-aprutil \
			  build-nghttp2 build-curl \
			  $(SRCDIR)/$(httpd_srcdir)/configure
	-mkdir $(httpd_srcdir) 2>/dev/null
	cd $(httpd_srcdir) && \
	  $(SRCDIR)/$(httpd_srcdir)/configure \
		 --prefix=$(DESTDIR) \
		 $(with_ssl) \
		 $(with_apr) \
		 $(with_aprutil) \
		 $(with_brotli) \
		 $(with_jansson) \
		 $(with_libxml2) \
		 $(with_lua) \
		 $(with_pcre) \
		 $(with_zlib) \
		 $(with_nghttp2) \
		 $(with_openldap) \
		 $(with_curl) \
		 --enable-mods-shared=all \
		 --enable-mpms-shared=all \
		 --enable-load-all-modules \
		 --enable-unixd=static \
		 --enable-version=static \
		 $(enable_ldap) \
		 --disable-dialup \
		 --disable-echo \
		 --disable-reflector \
		 --enable-cgi=shared \
		 --enable-authnz-fcgi=shared \
		 --enable-proxy-http2=shared \
		 --enable-suexec=shared \
		 --with-suexec-caller=httpd \
		 --with-suexec-bin=$(TARGET)/bin/suexec		\
		 --with-suexec-docroot=$(TARGET)/suexec-cgi-bin	\
		 --with-suexec-logfile=$(TARGET)/logs/suexec.log \
		 --with-mpm=event && \
	cd ..

build-httpd: $(httpd_srcdir)/Makefile
	cd $(httpd_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	  sed "s/\(LoadModule mpm_\(worker\|prefork\)\)/#\1/" \
		< $(DESTDIR)/conf/original/httpd.conf \
		> $(DESTDIR)/conf/httpd.conf && \
	cd ..


ifndef tcnative_srcdir
build-tcnative:
else
$(tcnative_srcdir)/Makefile: build-apr build-openssl \
			     $(SRCDIR)/$(tcnative_srcdir)/native/configure
	-mkdir $(tcnative_srcdir) 2>/dev/null
	cd $(tcnative_srcdir) && \
	  $(SRCDIR)/$(tcnative_srcdir)/native/configure \
		 $(with_apr) \
		 $(with_ssl) \
		 --prefix=$(DESTDIR) && \
	cd ..

build-tcnative: $(tcnative_srcdir)/Makefile
	cd $(tcnative_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
endif


