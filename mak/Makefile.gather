# VMware OSS Build Schema for Apache HTTP Server
# 
# Copyright (c) 2017-2022 VMware, Inc.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile.gather : Gather source code packages or (source checkouts)
#                   for all packages into the source tree, and generate
#                   a version and directory name manifest
#
# BLD defines the build type: release - candidate - snapshot - bleed
#
# This makefile is run first from the source directory root, and must be
# performed following updates to the source packages. Makefile.preconfig
# in the same directory should follow immediately if the manifest changes.

BLD=release
GRP=linux

all: gather-$(GRP)-$(BLD)

pre-manifest:
	mkdir pkgs 2>/dev/null || true
	echo Gathering $(BLD) Source Trees
	truncate -s0 $(BLD)-manifest-vars


gather-httpdtest-trunk: pre-manifest
	httpdtest_srcpath=https://github.com/apache/httpd-tests && \
	httpdtest_ver=trunk && \
	if test -d httpdtest-git; then ( cd httpdtest-git; git fetch --all ); else ( git clone $$httpdtest_srcpath --bare httpdtest-git ); fi && \
	httpdtest_rev=`cd httpdtest-git; git show -b $$httpdtest_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	httpdtest_srcdir=httpdtest-$$httpdtest_rev && \
	echo httpdtest_rev=$$httpdtest_rev >>$(BLD)-manifest-vars && \
	echo httpdtest_srcdir=$$httpdtest_srcdir >>$(BLD)-manifest-vars && \
	echo httpdtest_srcpath=$$httpdtest_srcpath >>$(BLD)-manifest-vars && \
	echo httpdtest_ver=$$httpdtest_ver >>$(BLD)-manifest-vars


gather-httpd-release: pre-manifest
	httpd_srcpath=https://www.apache.org/dist/httpd && \
	httpd_pkg=`wget -q -O - $$httpd_srcpath/ | sed -n '/<a href="\(httpd-2\.4\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	httpd_ver=`echo $$httpd_pkg | sed 's#httpd-\(.*\)\.tar\.bz2#\1#;'` && \
	httpd_srcdir=httpd-$$httpd_ver && \
	echo httpd_pkg=$$httpd_pkg >>$(BLD)-manifest-vars && \
	echo httpd_srcdir=$$httpd_srcdir >>$(BLD)-manifest-vars && \
	echo httpd_srcpath=$$httpd_srcpath >>$(BLD)-manifest-vars && \
	echo httpd_ver=$$httpd_ver >>$(BLD)-manifest-vars

gather-httpd-rc: pre-manifest
	httpd_srcpath=https://httpd.apache.org/dev/dist && \
	httpd_pkg=`wget -q -O - $$httpd_srcpath/ | sed -n '/<a href="\(httpd-2\.4\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	httpd_ver=`echo $$httpd_pkg | sed 's#httpd-\(.*\)\.tar\.bz2#\1#;'` && \
	httpd_srcdir=httpd-$$httpd_ver && \
	echo httpd_pkg=$$httpd_pkg >>$(BLD)-manifest-vars && \
	echo httpd_srcdir=$$httpd_srcdir >>$(BLD)-manifest-vars && \
	echo httpd_srcpath=$$httpd_srcpath >>$(BLD)-manifest-vars && \
	echo httpd_ver=$$httpd_ver >>$(BLD)-manifest-vars

gather-httpd-2xbranch: pre-manifest
	httpd_srcpath=https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x && \
	httpd_rev=`svn info $$httpd_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	httpd_ver=2.4.x-$$httpd_rev && \
	httpd_srcdir=httpd-$$httpd_ver && \
	echo httpd_rev=$$httpd_rev >>$(BLD)-manifest-vars && \
	echo httpd_srcdir=$$httpd_srcdir >>$(BLD)-manifest-vars && \
	echo httpd_srcpath=$$httpd_srcpath >>$(BLD)-manifest-vars && \
	echo httpd_ver=$$httpd_ver >>$(BLD)-manifest-vars

gather-httpd-trunk: pre-manifest
	httpd_srcpath=https://svn.apache.org/repos/asf/httpd/httpd/trunk && \
	httpd_rev=`svn info $$httpd_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	httpd_ver=2.5.x-$$httpd_rev && \
	httpd_srcdir=httpd-$$httpd_ver && \
	echo httpd_rev=$$httpd_rev >>$(BLD)-manifest-vars && \
	echo httpd_srcdir=$$httpd_srcdir >>$(BLD)-manifest-vars && \
	echo httpd_srcpath=$$httpd_srcpath >>$(BLD)-manifest-vars && \
	echo httpd_ver=$$httpd_ver >>$(BLD)-manifest-vars


gather-tcnative-release: pre-manifest
	tcnative_srcpath=https://www.apache.org/dist/tomcat/tomcat-connectors/native && \
	tcnative_ver=`wget -q -O - $$tcnative_srcpath/ | sed -n '/<a href="\(1\.2\.[0-9]*\/\)"/{s#.*href="\([^"/]*\)\/.*#\1#;h};$$!b;g;p'` && \
	tcnative_srcpath=$$tcnative_srcpath/$$tcnative_ver/source && \
	tcnative_srcdir=tomcat-native-$$tcnative_ver-src && \
	tcnative_pkg=$$tcnative_srcdir.tar.gz && \
	echo tcnative_pkg=$$tcnative_pkg >>$(BLD)-manifest-vars && \
	echo tcnative_srcdir=$$tcnative_srcdir >>$(BLD)-manifest-vars && \
	echo tcnative_srcpath=$$tcnative_srcpath >>$(BLD)-manifest-vars && \
	echo tcnative_ver=$$tcnative_ver >>$(BLD)-manifest-vars

gather-tcnative-trunk: pre-manifest
	tcnative_srcpath=https://github.com/apache/tomcat-native && \
	tcnative_ver=master && \
	if test -d tcnative-git; then ( cd tcnative-git; git fetch --all ); else ( git clone $$tcnative_srcpath --bare tcnative-git ); fi && \
	tcnative_rev=`cd tcnative-git; git show -b $$tcnative_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	tcnative_srcdir=tcnative-3.0.x-$$tcnative_rev && \
	echo tcnative_rev=$$tcnative_rev >>$(BLD)-manifest-vars && \
	echo tcnative_srcdir=$$tcnative_srcdir >>$(BLD)-manifest-vars && \
	echo tcnative_srcpath=$$tcnative_srcpath >>$(BLD)-manifest-vars && \
	echo tcnative_ver=$$tcnative_ver >>$(BLD)-manifest-vars


gather-apr-release: pre-manifest
	apr_srcpath=https://www.apache.org/dist/apr && \
	apr_pkg=`wget -q -O - $$apr_srcpath/ | sed -n '/<a href="\(apr-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	apr_ver=`echo $$apr_pkg | sed 's#apr-\(.*\)\.tar\.bz2#\1#;'` && \
	apr_srcdir=apr-$$apr_ver && \
	apr_major=`echo $$apr_ver | sed 's#\([0-9]*\)\..*#\1#;'` && \
	echo apr_major=$$apr_major >>$(BLD)-manifest-vars && \
	echo apr_pkg=$$apr_pkg >>$(BLD)-manifest-vars && \
	echo apr_srcdir=$$apr_srcdir >>$(BLD)-manifest-vars && \
	echo apr_srcpath=$$apr_srcpath >>$(BLD)-manifest-vars && \
	echo apr_ver=$$apr_ver >>$(BLD)-manifest-vars

gather-apr-rc: pre-manifest
	apr_srcpath=https://apr.apache.org/dev/dist && \
	apr_pkg=`wget -q -O - $$apr_srcpath/ | sed -n '/<a href="\(apr-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	apr_ver=`echo $$apr_pkg | sed 's#apr-\(.*\)\.tar\.bz2#\1#;'` && \
	apr_srcdir=apr-$$apr_ver && \
	apr_major=`echo $$apr_ver | sed 's#\([0-9]*\)\..*#\1#;'` && \
	echo apr_major=$$apr_major >>$(BLD)-manifest-vars && \
	echo apr_pkg=$$apr_pkg >>$(BLD)-manifest-vars && \
	echo apr_srcdir=$$apr_srcdir >>$(BLD)-manifest-vars && \
	echo apr_srcpath=$$apr_srcpath >>$(BLD)-manifest-vars && \
	echo apr_ver=$$apr_ver >>$(BLD)-manifest-vars

gather-apr-1xbranch: pre-manifest
	apr_srcpath=https://svn.apache.org/repos/asf/apr/apr/branches/1.7.x && \
	apr_rev=`svn info $$apr_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	apr_ver=1.7.x-$$apr_rev && \
	apr_srcdir=apr-$$apr_ver && \
	apr_major=`echo $$apr_ver | sed 's#\([0-9]*\)\..*#\1#;'` && \
	echo apr_major=$$apr_major >>$(BLD)-manifest-vars && \
	echo apr_rev=$$apr_rev >>$(BLD)-manifest-vars && \
	echo apr_srcdir=$$apr_srcdir >>$(BLD)-manifest-vars && \
	echo apr_srcpath=$$apr_srcpath >>$(BLD)-manifest-vars && \
	echo apr_ver=$$apr_ver >>$(BLD)-manifest-vars

gather-apr-trunk: pre-manifest
	apr_srcpath=https://svn.apache.org/repos/asf/apr/apr/trunk && \
	apr_rev=`svn info $$apr_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	apr_ver=2.0.x-$$apr_rev && \
	apr_srcdir=apr-$$apr_ver && \
	apr_major=`echo $$apr_ver | sed 's#\([0-9]*\)\..*#\1#;'` && \
	echo apr_major=$$apr_major >>$(BLD)-manifest-vars && \
	echo apr_rev=$$apr_rev >>$(BLD)-manifest-vars && \
	echo apr_srcdir=$$apr_srcdir >>$(BLD)-manifest-vars && \
	echo apr_srcpath=$$apr_srcpath >>$(BLD)-manifest-vars && \
	echo apr_ver=$$apr_ver >>$(BLD)-manifest-vars


gather-apriconv-release: pre-manifest
	apriconv_srcpath=https://www.apache.org/dist/apr && \
	apriconv_pkg=`wget -q -O - $$apriconv_srcpath/ | sed -n '/<a href="\(apr-iconv-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	apriconv_ver=`echo $$apriconv_pkg | sed 's#apr-iconv-\(.*\)\.tar\.bz2#\1#;'` && \
	echo apriconv_pkg=$$apriconv_pkg >>$(BLD)-manifest-vars && \
	echo apriconv_srcdir=apr-iconv-$$apriconv_ver >>$(BLD)-manifest-vars && \
	echo apriconv_srcpath=$$apriconv_srcpath >>$(BLD)-manifest-vars && \
	echo apriconv_ver=$$apriconv_ver >>$(BLD)-manifest-vars

gather-apriconv-rc: pre-manifest
	apriconv_srcpath=https://apr.apache.org/dev/dist && \
	apriconv_pkg=`wget -q -O - $$apriconv_srcpath/ | sed -n '/<a href="\(apr-iconv-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	apriconv_ver=`echo $$apriconv_pkg | sed 's#apr-iconv-\(.*\)\.tar\.bz2#\1#;'` && \
	echo apriconv_pkg=$$apriconv_pkg >>$(BLD)-manifest-vars && \
	echo apriconv_srcdir=apr-iconv-$$apriconv_ver >>$(BLD)-manifest-vars && \
	echo apriconv_srcpath=$$apriconv_srcpath >>$(BLD)-manifest-vars && \
	echo apriconv_ver=$$apriconv_ver >>$(BLD)-manifest-vars

gather-apriconv-1xbranch: pre-manifest
	apriconv_srcpath=https://svn.apache.org/repos/asf/apr/apr-iconv/trunk && \
	apriconv_rev=`svn info $$apriconv_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	apriconv_ver=1.3.x-$$apriconv_rev && \
	apriconv_srcdir=apr-iconv-$$apriconv_ver && \
	echo apriconv_rev=$$apriconv_rev >>$(BLD)-manifest-vars && \
	echo apriconv_srcdir=$$apriconv_srcdir >>$(BLD)-manifest-vars && \
	echo apriconv_srcpath=$$apriconv_srcpath >>$(BLD)-manifest-vars && \
	echo apriconv_ver=$$apriconv_ver >>$(BLD)-manifest-vars


gather-aprutil-release: pre-manifest
	aprutil_srcpath=https://www.apache.org/dist/apr && \
	aprutil_pkg=`wget -q -O - $$aprutil_srcpath/ | sed -n '/<a href="\(apr-util-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	aprutil_ver=`echo $$aprutil_pkg | sed 's#apr-util-\(.*\)\.tar\.bz2#\1#;'` && \
	echo aprutil_pkg=$$aprutil_pkg >>$(BLD)-manifest-vars && \
	echo aprutil_srcdir=apr-util-$$aprutil_ver >>$(BLD)-manifest-vars && \
	echo aprutil_srcpath=$$aprutil_srcpath >>$(BLD)-manifest-vars && \
	echo aprutil_ver=$$aprutil_ver >>$(BLD)-manifest-vars

gather-aprutil-rc: pre-manifest
	aprutil_srcpath=https://apr.apache.org/dev/dist && \
	aprutil_pkg=`wget -q -O - $$aprutil_srcpath/ | sed -n '/<a href="\(apr-util-1\.[0-9]\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	aprutil_ver=`echo $$aprutil_pkg | sed 's#apr-util-\(.*\)\.tar\.bz2#\1#;'` && \
	echo aprutil_pkg=$$aprutil_pkg >>$(BLD)-manifest-vars && \
	echo aprutil_srcdir=apr-util-$$aprutil_ver >>$(BLD)-manifest-vars && \
	echo aprutil_srcpath=$$aprutil_srcpath >>$(BLD)-manifest-vars && \
	echo aprutil_ver=$$aprutil_ver >>$(BLD)-manifest-vars

gather-aprutil-1xbranch: pre-manifest
	aprutil_srcpath=https://svn.apache.org/repos/asf/apr/apr-util/branches/1.7.x && \
	aprutil_rev=`svn info $$aprutil_srcpath | sed -n '/Last Changed Rev: \([0-9]\+\)/{s#.*: ##;p}'` && \
	aprutil_ver=1.7.x-$$aprutil_rev && \
	aprutil_srcdir=apr-util-$$aprutil_ver && \
	echo aprutil_rev=$$aprutil_rev >>$(BLD)-manifest-vars && \
	echo aprutil_srcdir=$$aprutil_srcdir >>$(BLD)-manifest-vars && \
	echo aprutil_srcpath=$$aprutil_srcpath >>$(BLD)-manifest-vars && \
	echo aprutil_ver=$$aprutil_ver >>$(BLD)-manifest-vars

gather-aprutil-trunk: pre-manifest
#	NOOP - aprutil merges into apr


gather-openssl-release: pre-manifest
	openssl_srcpath=https://www.openssl.org/source && \
	openssl_pkg=`wget -q -O - $$openssl_srcpath/ | sed 's#.*<a href="\(openssl-1\.1\.1[a-z]*\.tar\.gz\)".*#\1#p;d;'` && \
	openssl_ver=`echo $$openssl_pkg | sed 's#openssl-\(.*\)\.tar\.gz#\1#;'` && \
	echo openssl_pkg=$$openssl_pkg >>$(BLD)-manifest-vars && \
	echo openssl_srcdir=openssl-$$openssl_ver >>$(BLD)-manifest-vars && \
	echo openssl_srcpath=$$openssl_srcpath >>$(BLD)-manifest-vars && \
	echo openssl_ver=$$openssl_ver >>$(BLD)-manifest-vars

gather-openssl3-release: pre-manifest
	openssl_srcpath=https://www.openssl.org/source && \
	openssl_pkg=`wget -q -O - $$openssl_srcpath/ | sed 's#.*<a href="\(openssl-3\.[a-z0-9\.]*\.tar\.gz\)".*#\1#p;d;'` && \
	openssl_ver=`echo $$openssl_pkg | sed 's#openssl-\(.*\)\.tar\.gz#\1#;'` && \
	echo openssl_pkg=$$openssl_pkg >>$(BLD)-manifest-vars && \
	echo openssl_srcdir=openssl-$$openssl_ver >>$(BLD)-manifest-vars && \
	echo openssl_srcpath=$$openssl_srcpath >>$(BLD)-manifest-vars && \
	echo openssl_ver=$$openssl_ver >>$(BLD)-manifest-vars

gather-openssl-candidate: pre-manifest
	openssl_srcpath=https://www.openssl.org/source && \
	openssl_pkg=`wget -q -O - $$openssl_srcpath/ | sed 's#.*<a href="\(openssl-3\.[a-z0-9\.]*\.tar\.gz\)".*#\1#p;d;'` && \
	openssl_ver=`echo $$openssl_pkg | sed 's#openssl-\(.*\)\.tar\.gz#\1#;'` && \
	echo openssl_pkg=$$openssl_pkg >>$(BLD)-manifest-vars && \
	echo openssl_srcdir=openssl-$$openssl_ver >>$(BLD)-manifest-vars && \
	echo openssl_srcpath=$$openssl_srcpath >>$(BLD)-manifest-vars && \
	echo openssl_ver=$$openssl_ver >>$(BLD)-manifest-vars

gather-openssl-master: pre-manifest
	openssl_srcpath=https://github.com/openssl/openssl && \
	openssl_ver=master && \
	if test -d openssl-git; then ( cd openssl-git; git fetch --all ); else ( git clone $$openssl_srcpath --bare openssl-git ); fi && \
	openssl_rev=`cd openssl-git; git show -b $$openssl_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	openssl_srcdir=openssl-3.0.x-$$openssl_rev && \
	echo openssl_rev=$$openssl_rev >>$(BLD)-manifest-vars && \
	echo openssl_srcdir=$$openssl_srcdir >>$(BLD)-manifest-vars && \
	echo openssl_srcpath=$$openssl_srcpath >>$(BLD)-manifest-vars && \
	echo openssl_ver=$$openssl_ver >>$(BLD)-manifest-vars


gather-nghttp2-release: pre-manifest
	nghttp2_srcpath=https://github.com/nghttp2/nghttp2/releases && \
	nghttp2_pkg=`wget --max-redirect=0 $$nghttp2_srcpath/latest/ 2>&1 | sed 's#Location: \(.*\)/tag/v\([^/]*\) \[following\]#\1/download/v\2/nghttp2-\2.tar.bz2#p;d;'` && \
	nghttp2_srcpath=`echo $$nghttp2_pkg | sed 's#/[^/]*$$##;'` && \
	nghttp2_pkg=`echo $$nghttp2_pkg | sed 's#.*/##;'` && \
	nghttp2_ver=`echo $$nghttp2_pkg | sed 's#nghttp2-\(.*\)\.tar\.bz2#\1#;'`&& \
	nghttp2_srcdir=nghttp2-$$nghttp2_ver && \
	echo nghttp2_pkg=$$nghttp2_pkg >>$(BLD)-manifest-vars && \
	echo nghttp2_srcdir=$$nghttp2_srcdir >>$(BLD)-manifest-vars && \
	echo nghttp2_srcpath=$$nghttp2_srcpath >>$(BLD)-manifest-vars && \
	echo nghttp2_ver=$$nghttp2_ver >>$(BLD)-manifest-vars

gather-nghttp2-master: pre-manifest
	nghttp2_srcpath=https://github.com/nghttp2/nghttp2 && \
	nghttp2_ver=master && \
	if test -d nghttp2-git; then ( cd nghttp2-git; git fetch --all ); else ( git clone $$nghttp2_srcpath --bare nghttp2-git ); fi && \
	nghttp2_rev=`cd nghttp2-git; git show -b $$nghttp2_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	nghttp2_srcdir=nghttp2-1.x-$$nghttp2_rev && \
	echo nghttp2_rev=$$nghttp2_rev >>$(BLD)-manifest-vars && \
	echo nghttp2_srcdir=$$nghttp2_srcdir >>$(BLD)-manifest-vars && \
	echo nghttp2_srcpath=$$nghttp2_srcpath >>$(BLD)-manifest-vars && \
	echo nghttp2_ver=$$nghttp2_ver >>$(BLD)-manifest-vars


gather-brotli-release: pre-manifest
	brotli_srcpath=https://github.com/google/brotli/releases && \
	brotli_ver=`wget --max-redirect=0 $$brotli_srcpath/latest/ 2>&1 | sed 's#Location: .*/tag/v\([^/]*\) \[following\]#\1#p;d;'` && \
	brotli_srcpath=https://github.com/google/brotli/archive/refs/tags/v$$brotli_ver.tar.gz && \
	brotli_srcdir=brotli-$$brotli_ver && \
	brotli_pkg=$$brotli_srcdir.tar.gz && \
	echo brotli_pkg=$$brotli_pkg >>$(BLD)-manifest-vars && \
	echo brotli_srcdir=$$brotli_srcdir >>$(BLD)-manifest-vars && \
	echo brotli_srcpath=$$brotli_srcpath >>$(BLD)-manifest-vars && \
	echo brotli_ver=$$brotli_ver >>$(BLD)-manifest-vars

gather-brotli-master: pre-manifest
	brotli_srcpath=https://github.com/google/brotli && \
	brotli_ver=master && \
	if test -d brotli-git; then ( cd brotli-git; git fetch --all ); else ( git clone $$brotli_srcpath --bare brotli-git ); fi && \
	brotli_rev=`cd brotli-git; git show -b $$brotli_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	brotli_srcdir=brotli-1.0.x-$$brotli_rev && \
	echo brotli_rev=$$brotli_rev >>$(BLD)-manifest-vars && \
	echo brotli_srcdir=$$brotli_srcdir >>$(BLD)-manifest-vars && \
	echo brotli_srcpath=$$brotli_srcpath >>$(BLD)-manifest-vars && \
	echo brotli_ver=$$brotli_ver >>$(BLD)-manifest-vars


gather-curl-release: pre-manifest
	curl_srcpath=https://curl.haxx.se/download && \
	curl_pkg=`wget -q -O - $$curl_srcpath.html | sed -n '/<a href="\/download\/\(curl-7\.[0-9.]*\.tar\.bz2\)"/{s#.*href="\/download\/\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	curl_ver=`echo $$curl_pkg | sed 's#curl-\(.*\)\.tar\.bz2#\1#;'` && \
	curl_srcdir=curl-$$curl_ver && \
	echo curl_pkg=$$curl_pkg >>$(BLD)-manifest-vars && \
	echo curl_srcdir=$$curl_srcdir >>$(BLD)-manifest-vars && \
	echo curl_srcpath=$$curl_srcpath >>$(BLD)-manifest-vars && \
	echo curl_ver=$$curl_ver >>$(BLD)-manifest-vars

gather-curl-master: pre-manifest
	curl_srcpath=https://github.com/curl/curl && \
	curl_ver=master && \
	if test -d curl-git; then ( cd curl-git; git fetch --all ); else ( git clone $$curl_srcpath --bare curl-git ); fi && \
	curl_rev=`cd curl-git; git show -b $$curl_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	curl_srcdir=curl-7.x-$$curl_rev && \
	echo curl_rev=$$curl_rev >>$(BLD)-manifest-vars && \
	echo curl_srcdir=$$curl_srcdir >>$(BLD)-manifest-vars && \
	echo curl_srcpath=$$curl_srcpath >>$(BLD)-manifest-vars && \
	echo curl_ver=$$curl_ver >>$(BLD)-manifest-vars


gather-openldap-release: pre-manifest
	openldap_srcpath=https://gpl.savoirfairelinux.net/pub/mirrors/openldap/openldap-release && \
	openldap_pkg=`wget -q -O - $$openldap_srcpath/ | sed -n '/<a href="\(openldap-2\.4\.[0-9]*\.tgz\)"/{s#.*href="\(.*\.tgz\)".*#\1#;h};$$!b;g;p'` && \
	openldap_ver=`echo $$openldap_pkg | sed 's#openldap-\(.*\)\.tgz#\1#;'` && \
	openldap_srcdir=openldap-$$openldap_ver && \
	echo openldap_pkg=$$openldap_pkg >>$(BLD)-manifest-vars && \
	echo openldap_srcdir=$$openldap_srcdir >>$(BLD)-manifest-vars && \
	echo openldap_srcpath=$$openldap_srcpath >>$(BLD)-manifest-vars && \
	echo openldap_ver=$$openldap_ver >>$(BLD)-manifest-vars

gather-openldap-master: pre-manifest
	openldap_srcpath=https://git.openldap.org/openldap/openldap.git && \
	openldap_ver=master && \
	if test -d openldap-git; then ( cd openldap-git; git fetch --all ); else ( git clone $$openldap_srcpath --bare openldap-git ); fi && \
	openldap_rev=`cd openldap-git; git show -b $$openldap_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	openldap_srcdir=openldap-2.x-$$openldap_rev && \
	echo openldap_rev=$$openldap_rev >>$(BLD)-manifest-vars && \
	echo openldap_srcdir=$$openldap_srcdir >>$(BLD)-manifest-vars && \
	echo openldap_srcpath=$$openldap_srcpath >>$(BLD)-manifest-vars && \
	echo openldap_ver=$$openldap_ver >>$(BLD)-manifest-vars


gather-expat-release: pre-manifest
	expat_srcpath=https://github.com/libexpat/libexpat/releases && \
	expat_ver=`wget -q -O - $$expat_srcpath | sed -n 's#^.*<a.* href=".*\/archive\/refs\/tags\/R_\(.*\)\.tar\.gz".*$$#\1#;t once;$$!b;:once;p;q;'` && \
	expat_srcpath=https://github.com/libexpat/libexpat/archive/refs/tags/R_$$expat_ver.tar.gz && \
	expat_srcdir=libexpat-R_$$expat_ver && \
	expat_pkg=$$expat_srcdir.tar.gz && \
	expat_ver=`echo $$expat_ver | sed "s#_#.#g"` && \
	echo expat_pkg=$$expat_pkg >>$(BLD)-manifest-vars && \
	echo expat_srcdir=$$expat_srcdir >>$(BLD)-manifest-vars && \
	echo expat_srcpath=$$expat_srcpath >>$(BLD)-manifest-vars && \
	echo expat_ver=$$expat_ver >>$(BLD)-manifest-vars

gather-expat-master: pre-manifest
	expat_srcpath=https://github.com/libexpat/libexpat && \
	expat_ver=master && \
	if test -d expat-git; then ( cd expat-git; git fetch --all ); else ( git clone $$expat_srcpath --bare expat-git ); fi && \
	expat_rev=`cd expat-git; git show -b $$expat_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	expat_srcdir=expat-2.x-$$expat_rev && \
	echo expat_rev=$$expat_rev >>$(BLD)-manifest-vars && \
	echo expat_srcdir=$$expat_srcdir >>$(BLD)-manifest-vars && \
	echo expat_srcpath=$$expat_srcpath >>$(BLD)-manifest-vars && \
	echo expat_ver=$$expat_ver >>$(BLD)-manifest-vars


gather-pcre-release: pre-manifest
	pcre_srcpath=https://ftp.exim.org/pub/pcre && \
	pcre_srcpath=$$pcre_srcpath/`wget -q -O - $$pcre_srcpath/ | sed -n '/<a href="\(pcre-8\.[0-9]*\.tar\.bz2\)"/{s#.*href="\([^"]*\).*#\1#;h};$$!b;g;p'` && \
	pcre_pkg=`echo $$pcre_srcpath | sed "s#.*/\([^/]*\)#\1#;"` && \
	pcre_srcdir=`echo $$pcre_pkg | sed 's#\(pcre-.*\)\.tar\.bz2#\1#;'` && \
	pcre_ver=`echo $$pcre_srcdir | sed 's#pcre-\(.*\)#\1#;'` && \
	echo pcre_pkg=$$pcre_pkg >>$(BLD)-manifest-vars && \
	echo pcre_srcdir=$$pcre_srcdir >>$(BLD)-manifest-vars && \
	echo pcre_srcpath=$$pcre_srcpath >>$(BLD)-manifest-vars && \
	echo pcre_ver=$$pcre_ver >>$(BLD)-manifest-vars

gather-pcre2-release: pre-manifest
	pcre_srcpath=https://github.com/PCRE2Project/pcre2/releases && \
	pcre_srcpath=$$pcre_srcpath/`wget -q -O - $$pcre_srcpath | sed -n 's#^.*<a.* href=".*/PCRE2Project/pcre2/releases/\(download/pcre2-[^"/]*/pcre2[^"]*\.tar\.bz2\)".*$$#\1#;t once;$$!b;:once;p;q;'` && \
	pcre_pkg=`echo $$pcre_srcpath | sed "s#.*/\([^/]*\)#\1#;"` && \
	pcre_ver=`echo $$pcre_pkg | sed "s#pcre2-\(.*\)\.tar\.bz2#\1#;"` && \
	pcre_srcdir=`echo $$pcre_pkg | sed "s#\(.*\)\.tar\.bz2#\1#;"` && \
	echo pcre_pkg=$$pcre_pkg >>$(BLD)-manifest-vars && \
	echo pcre_srcdir=$$pcre_srcdir >>$(BLD)-manifest-vars && \
	echo pcre_srcpath=$$pcre_srcpath >>$(BLD)-manifest-vars && \
	echo pcre_ver=$$pcre_ver >>$(BLD)-manifest-vars

gather-pcre2-master: pre-manifest
	pcre_srcpath=https://github.com/PCRE2Project/pcre2 && \
	pcre_ver=master && \
	if test -d pcre2-git; then ( cd pcre2-git; git fetch --all ); else ( git clone $$pcre_srcpath --bare pcre2-git ); fi && \
	pcre_rev=`cd pcre2-git; git show -b $$pcre_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	pcre_srcdir=pcre2-10.x-$$pcre_rev && \
	echo pcre_rev=$$pcre_rev >>$(BLD)-manifest-vars && \
	echo pcre_srcdir=$$pcre_srcdir >>$(BLD)-manifest-vars && \
	echo pcre_srcpath=$$pcre_srcpath >>$(BLD)-manifest-vars && \
	echo pcre_ver=$$pcre_ver >>$(BLD)-manifest-vars


gather-jansson-release: pre-manifest
	jansson_srcpath=https://github.com/akheron/jansson/releases && \
	jansson_ver=`wget -q -O - $$jansson_srcpath | sed -n 's#^.*<a.* href=".*\/archive\/refs\/tags\/v\(.*\)\.tar\.gz".*$$#\1#;t once;$$!b;:once;p;q;'` && \
	jansson_srcpath=https://github.com/akheron/jansson/archive/refs/tags/v$$jansson_ver.tar.gz && \
	jansson_srcdir=jansson-$$jansson_ver && \
	jansson_pkg=$$jansson_srcdir.tar.gz && \
	jansson_ver=`echo $$jansson_ver | sed "s#_#.#g"` && \
	echo jansson_pkg=$$jansson_pkg >>$(BLD)-manifest-vars && \
	echo jansson_srcdir=$$jansson_srcdir >>$(BLD)-manifest-vars && \
	echo jansson_srcpath=$$jansson_srcpath >>$(BLD)-manifest-vars && \
	echo jansson_ver=$$jansson_ver >>$(BLD)-manifest-vars

gather-jansson-master: pre-manifest
	jansson_srcpath=https://github.com/akheron/jansson && \
	jansson_ver=master && \
	if test -d jansson-git; then ( cd jansson-git; git fetch --all ); else ( git clone $$jansson_srcpath --bare jansson-git ); fi && \
	jansson_rev=`cd jansson-git; git show -b $$jansson_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	jansson_srcdir=jansson-2.x-$$jansson_rev && \
	echo jansson_rev=$$jansson_rev >>$(BLD)-manifest-vars && \
	echo jansson_srcpath=$$jansson_srcpath >>$(BLD)-manifest-vars && \
	echo jansson_srcdir=$$jansson_srcdir >>$(BLD)-manifest-vars && \
	echo jansson_ver=$$jansson_ver >>$(BLD)-manifest-vars


gather-libxml2-release: pre-manifest
	libxml2_srcpath=https://gitlab.gnome.org/GNOME/libxml2/- && \
	libxml2_srcpath=$$libxml2_srcpath/`wget -q -O - $$libxml2_srcpath/tags | sed -n 's#.*<a .* href=".*/GNOME/libxml2/-/\(archive/v[^"/]*/libxml2-v[^"/>]*\.tar\.bz2\)">.*#\1#;t once;$$!b;:once;p;q;'` && \
	libxml2_pkg=`echo $$libxml2_srcpath | sed "s#.*/\([^/]*\)#\1#;"` && \
	libxml2_ver=`echo $$libxml2_pkg | sed "s#libxml2-v\(.*\)\.tar\.bz2#\1#;"` && \
	libxml2_srcdir=`echo $$libxml2_pkg | sed "s#\(.*\)\.tar\.bz2#\1#;"` && \
	echo libxml2_pkg=$$libxml2_pkg >>$(BLD)-manifest-vars && \
	echo libxml2_srcdir=$$libxml2_srcdir >>$(BLD)-manifest-vars && \
	echo libxml2_srcpath=$$libxml2_srcpath >>$(BLD)-manifest-vars && \
	echo libxml2_ver=$$libxml2_ver >>$(BLD)-manifest-vars

gather-libxml2-master: pre-manifest
	libxml2_srcpath=https://github.com/gnome/libxml2 && \
	libxml2_ver=master && \
	if test -d libxml2-git; then ( cd libxml2-git; git fetch --all ); else ( git clone $$libxml2_srcpath --bare libxml2-git ); fi && \
	libxml2_rev=`cd libxml2-git; git show -b $$libxml2_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	libxml2_srcdir=libxml2-2.x-$$libxml2_rev && \
	echo libxml2_rev=$$libxml2_rev >>$(BLD)-manifest-vars && \
	echo libxml2_srcdir=$$libxml2_srcdir >>$(BLD)-manifest-vars && \
	echo libxml2_srcpath=$$libxml2_srcpath >>$(BLD)-manifest-vars && \
	echo libxml2_ver=$$libxml2_ver >>$(BLD)-manifest-vars

gather-lua-release: pre-manifest
	lua_srcpath=https://www.lua.org/ftp && \
 	lua_pkg=`wget -q -O - $$lua_srcpath/ | sed -n '/<A HREF="lua-[0-9]/{s#.*HREF="\(lua-[0-9.]*tar.gz\)".*#\1#;p;q}'` && \
	lua_srcdir=`echo $$lua_pkg | sed 's#\(.*\)\.tar\.gz#\1#;'` && \
	lua_ver=`echo $$lua_srcdir | sed 's#lua-\(.*\)#\1#;'` && \
	echo lua_pkg=$$lua_pkg >>$(BLD)-manifest-vars && \
	echo lua_srcdir=$$lua_srcdir >>$(BLD)-manifest-vars && \
	echo lua_srcpath=$$lua_srcpath >>$(BLD)-manifest-vars && \
	echo lua_ver=$$lua_ver >>$(BLD)-manifest-vars


gather-zlib-release: pre-manifest
	zlib_srcpath=https://zlib.net && \
	zlib_pkg=`wget -q -O - $$zlib_srcpath/ | sed -n '/<a href="\(zlib-1\.[0-9.]*\.tar\.gz\).asc"/{s#.*href="\(.*\)\.asc".*#\1#;p;q}'` && \
	zlib_srcdir=`echo $$zlib_pkg | sed 's#\(.*\)\.tar\.gz#\1#;'` && \
	zlib_ver=`echo $$zlib_srcdir | sed 's#zlib-\(.*\)#\1#;'` && \
	echo zlib_pkg=$$zlib_pkg >>$(BLD)-manifest-vars && \
	echo zlib_srcdir=$$zlib_srcdir >>$(BLD)-manifest-vars && \
	echo zlib_srcpath=$$zlib_srcpath >>$(BLD)-manifest-vars && \
	echo zlib_ver=$$zlib_ver >>$(BLD)-manifest-vars

gather-zlib-master: pre-manifest
	zlib_srcpath=https://github.com/madler/zlib && \
	zlib_ver=master && \
	if test -d zlib-git; then ( cd zlib-git; git fetch --all ); else ( git clone $$zlib_srcpath --bare zlib-git ); fi && \
	zlib_rev=`cd zlib-git; git show -b $$zlib_ver --format="format:%h" --name-only | awk "//{print $$1; exit;}"` && \
	zlib_srcdir=zlib-1.2.x-$$zlib_rev && \
	echo zlib_rev=$$zlib_rev >>$(BLD)-manifest-vars && \
	echo zlib_srcdir=$$zlib_srcdir >>$(BLD)-manifest-vars && \
	echo zlib_srcpath=$$zlib_srcpath >>$(BLD)-manifest-vars && \
	echo zlib_ver=$$zlib_ver >>$(BLD)-manifest-vars


# by defining a target using gather-pcre-release or gather-openssl-release, the
# user can back up to the previous openssl-1.1.1 or pcre-8.x legacy components.

gather-core-release:  gather-apr-release gather-aprutil-release \
		      gather-httpd-release gather-openssl3-release \
		      gather-nghttp2-release gather-brotli-release \
		      gather-curl-release gather-httpdtest-trunk

gather-complete-release: gather-core-release \
		      gather-expat-release gather-pcre2-release \
		      gather-apriconv-release gather-libxml2-release \
		      gather-lua-release gather-zlib-release \
		      gather-jansson-release
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav

gather-linux-release: gather-core-release
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav


gather-core-candidate: gather-apr-rc gather-aprutil-rc \
		      gather-httpd-rc gather-openssl-candidate \
		      gather-nghttp2-release gather-brotli-release \
		      gather-curl-release gather-httpdtest-trunk

gather-linux-candidate: gather-core-candidate
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav

gather-complete-candidate: gather-core-candidate \
		      gather-expat-release gather-pcre2-release \
		      gather-apriconv-rc gather-libxml2-release \
		      gather-lua-release gather-zlib-release \
		      gather-jansson-release
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav


gather-core-snapshot: gather-apr-1xbranch gather-aprutil-1xbranch \
		      gather-expat-master gather-pcre2-master \
		      gather-apriconv-1xbranch gather-libxml2-master \
		      gather-httpd-2xbranch gather-openssl-master \
		      gather-nghttp2-master gather-brotli-master \
		      gather-curl-master gather-httpdtest-trunk \
		      gather-zlib-master gather-jansson-master

gather-complete-snapshot: gather-core-snapshot \
		      gather-lua-release
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav

gather-linux-snapshot: gather-core-snapshot
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav


gather-core-bleed:    gather-apr-trunk gather-pcre2-master \
		      gather-httpd-trunk gather-openssl-master \
		      gather-nghttp2-master gather-brotli-master \
		      gather-expat-master gather-libxml2-master \
		      gather-curl-master gather-jansson-master \
		      gather-zlib-master gather-httpdtest-trunk

gather-complete-bleed: gather-core-bleed \
		      gather-lua-release
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav

gather-linux-bleed:   gather-core-bleed
	mv $(BLD)-manifest-vars $(BLD)-manifest-vars.sav
	LC_COLLATE=C sort < $(BLD)-manifest-vars.sav > $(BLD)-manifest-vars
	rm $(BLD)-manifest-vars.sav

ifeq "$(BLD)" "release"
tcnative: gather-tcnative-release

openldap: gather-openldap-release

else ifeq "$(BLD)" "candidate"
tcnative: gather-tcnative-release

openldap: gather-openldap-release

else ifeq "$(BLD)" "snapshot"
tcnative: gather-tcnative-trunk

openldap: gather-openldap-master

else
tcnative: gather-tcnative-trunk

openldap: gather-openldap-master

endif

